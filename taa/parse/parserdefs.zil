<ZZSECTION "PARSERDEFS">

<USE "NEWSTRUC" "PMEM" "PSTACK">

<INCLUDE "BASEDEFS">

<FILE-FLAGS MDL-ZIL?>

"Defaults for ZIL-type DEFSTRUCTs"
<SET-DEFSTRUCT-FILE-DEFAULTS ('START-OFFSET 0) ('NTH ZGET) ('PUT ZPUT)
			     'NODECL>

<BLOCK (<ROOT>)>
ZMEMQ
ZMEMQB
<ENDBLOCK>

<COND (<CHECK-VERSION? XZIP>
       <DEFMAC ZMEMQB ('OBJ 'TBL 'LEN)
         <FORM INTBL? .OBJ .TBL .LEN 1>>)
      (T
       <ROUTINE ZMEMQB (OBJ:ANY TBL:TABLE LEN:FIX)
         <REPEAT ((N 0))
		 <COND (<==? <GETB .TBL .N> .OBJ>
			<RETURN <ZREST .TBL .N>>)>
		 <COND (<G=? <SET N <+ .N 1>> .LEN>
			<RETURN <>>)>>>)>

<COND (<CHECK-VERSION? ZIP>
       <ROUTINE ZMEMQ (OBJ:ANY TBL:TABLE LEN:FIX)
         <REPEAT ((N 0))
	   <COND (<==? <ZGET .TBL .N> .OBJ>
		  <RETURN <ZREST .TBL <* .N 2>>>)>
	   <COND (<G=? <SET N <+ .N 1>> .LEN>
		  <RETURN <>>)>>>)
      (T
       <DEFMAC ZMEMQ ('OBJ 'TBL 'LEN)
         <FORM INTBL? .OBJ .TBL .LEN>>)>

<SETG20 PARSERDEFS-INTERNAL-OBLIST .OBLIST>

<MSETG PARSER-ERROR-ARG-PMEM 1>
<MSETG PARSER-ERROR-ARG-VWORD 2>

<MSETG PARSER-RESULT-DEAD 0>
<MSETG PARSER-RESULT-FAILED 1>
<MSETG PARSER-RESULT-WON 2>

"Definitions for various PMEMs"
<MSETG ADJ*-MAX-COUNT 4>
<PM-TYPE ADJ* <+ 1 ,ADJ*-MAX-COUNT>
	 (COUNT FIX 0)>
<PM-TYPE NP 7
	 (ADJ* <OR FALSE PMEM>)
	 (NAME <OR FALSE VWORD>)
	 (QUANT <OR FALSE FIX>)
	 (OF <OR FALSE PMEM>)
	 (LOC <OR FALSE PMEM>)
	 (EXCEPT <OR FALSE PMEM>)
	 (OWNER <OR FALSE PMEM>)>
<PM-TYPE NPP 3
	 (NEXT <OR FALSE PMEM>)
	 (NOUN <OR FALSE PMEM>)
	 (NOUN-PHRASE <OR FALSE PMEM>)>
<PM-TYPE NOUN-PHRASE <>
	 (COUNT FIX 0)
	 (FLAGS FIX 0)
	 (OBJ1 <OR FALSE PMEM>)
	 (NP1 <OR FALSE PMEM>)>
<MSETG NP-FLAG-MULTI 1>
<MSETG NOUN-PHRASE-ENTLENB 4>
<MSETG NOUN-PHRASE-ENTLEN 2>
<DEFMAC NP-MULTI? ('NOUN-PHRASE)
  <FORM NOT <FORM 0? <FORM ANDB <FORM NOUN-PHRASE-FLAGS .NOUN-PHRASE>
			   ,NP-FLAG-MULTI>>>>
<MSETG NOUN-PHRASE-HEADER-LEN 3>
<MSETG NOUN-PHRASE-MIN-LENGTH 4>
<PM-TYPE PP 2
	 (PREP VWORD NONE)
	 (NOUN PMEM NONE)>
<PM-TYPE LOCATION 2
	 (PREP VWORD NONE)
	 (OBJECT PMEM NONE)>

"NP-QUANT slot"
<MSETG NP-QUANT-NONE <>>
<MSETG NP-QUANT-A 1>
<MSETG NP-QUANT-SOME 2>
<MSETG NP-QUANT-ALL 3>
<MSETG NP-QUANT-BOTH 4>
<MSETG NP-QUANT-NOTHING 5>
<MSETG NP-QUANT-PLURAL 6>

<GDECL (VALID-VERB-CLASSES VALID-QUESTION-CLASSES) <VECTOR [REST FIX]>>

ADJ-CLASS

NOUN-CLASS

<MSETG FIRST-PERSON 8>
<MSETG PLURAL-FLAG 16>
<MSETG SECOND-PERSON 32>
<MSETG THIRD-PERSON 64>
<MSETG PRESENT-TENSE 256>
<MSETG PAST-TENSE 512>
<MSETG FUTURE-TENSE 1024>
<MSETG PERSON-PNF 4096>
<MSETG THING-PNF 8192>
<MSETG POSSESSIVE 16384>
<MSETG DONT-ORPHAN 32768>
;<MSETG DEFAULT-OBJECT 65536>

<COND (<CHECK-VERSION? XZIP>
       <DEFMAC ZSUBSTRUC ('OT 'CT 'NT)
         <FORM COPYT .OT .NT <FORM * .CT 2>>>)
      (T
       <ROUTINE ZSUBSTRUC (OT:<PRIMTYPE TABLE> CT:FIX NT:<PRIMTYPE TABLE>)
         <REPEAT ()
	   <COND (<0? .CT> <RETURN>)>
	   <SET CT <- .CT 1>>
	   <ZPUT .NT .CT <ZGET .OT .CT>>>
	 .NT>)>



<DEFSTRUCT PARSE-RESULT
	   (TABLE
	    ('PRINTTYPE TABLE-PRINT))
	   (PARSE-ADV <OR FALSE VWORD>)
	   (PARSE-VERB <OR FALSE VWORD>)
	   (PARSE-VERB-LEXV <OR FALSE TABLE>)
	   (PARSE-SYNTAX <OR FALSE VERB-SYNTAX>)
	   (PARSE-ACTION <OR FALSE FIX>)
	   (PARSE-OBJ1 <OR FALSE PMEM>)
	   (PARSE-OBJ2 <OR FALSE PMEM>)
	   (PARSE-PARTICLE <OR FALSE VWORD>)
	   (PARSE-LOC <OR FALSE PMEM>)
	   (PARSE-QW <OR FALSE VWORD>)
	   (PARSE-ADJ <OR FALSE VWORD>)
	   (PARSE-CHOMPER <OR FALSE OBJECT>)
	   (PARSE-ORPHAN-NOUN <OR FALSE ATOM>)
	   (PARSE-ORPHAN-LOC <OR FALSE ATOM>)
	   (PARSE-ORPHAN-ADJ <OR FALSE PMEM>)
	   (PARSE-SUBJ <OR FALSE PMEM>)
	   (PARSE-QUERY <OR FALSE VWORD>)
	   (PARSE-FLAGS FIX)>

<MSETG PARSE-NOT 1>

<MSETG PARSE-QUESTION 2>


"Objects are inserted (starting at find-res-obj1 until the vector is full;
 the count goes in find-res-count..."

<DEFSTRUCT FIND-RES
	   (TABLE 'NOTYPE)
	   (FIND-RES-HEADER FIX 'NONE)
	   (FIND-RES-SIZE FIX 'NONE 'NTH GETB 'PUT PUTB 'OFFSET 0)
	   (FIND-RES-COUNT FIX 0 'NTH GETB 'PUT PUTB 'OFFSET 1)
	   (FIND-RES-OBJ1 ANY <>)
	   (FIND-RES-OBJ2 ANY <>)>

<DEFSTRUCT FINDER
	   TABLE
	   (FIND-APPLIC <OR TABLE FIX> 0) ; "Thing to call to check object"
	   (FIND-FLAGS FIX)	; "Gwimming, search globals, etc."
	   (FIND-QUANT <OR FIX FALSE>)	; "All, one, etc."
	   (FIND-SYNTAX <OR FALSE VERB-SYNTAX>)
	   (FIND-WHICH FIX)	; "Which argument of the verb we're getting"
	   (FIND-ADJS <OR PMEM FALSE>)
	   (FIND-NOUN <OR VWORD FALSE>)
	   (FIND-EXCEPTIONS <OR PMEM FALSE>)
	   (FIND-RES <OR FIND-RES FALSE>)
	   ; "Where to put result, whatever it is.">

<DEFINE-GLOBALS PARSER-GLOBALS
  ; "Globals used in FIND.ZIL"
  (SEARCH-RES:FIND-RES <MAKE-FIND-RES 'FIND-RES <ITABLE 30 0>
				      'FIND-RES-SIZE 29
				      'FIND-RES-COUNT 0>)
  (FINDER:FINDER <MAKE-FINDER>)
  (P-NOT-HERE:FIX BYTE)
  (FOUND-IN-WRONG-PLACE:FIX BYTE)
  ; "PARSER.ZIL"
  (ERROR-ARGS:TABLE <ITABLE 7 <>>)
  ERROR-STRING
  (ERROR-PRIORITY:FIX BYTE)
  (STATE-STACK:PSTACK <ALLOCATE-PSTACK>)
  (SPLIT-STACK:PSTACK <ALLOCATE-PSTACK>)
  (DATA-STACK:PSTACK <ALLOCATE-PSTACK>)
  (AGAIN-LEXV:TABLE <ITABLE 59 (LEXV) 0 #BYTE 0 #BYTE 0>)
  (RESERVE-LEXV:TABLE <ITABLE 59 (LEXV) 0 #BYTE 0 #BYTE 0>)
  (RESERVE-PTR:FIX BYTE <>)
  (RESERVE-INBUF:TABLE <ITABLE 120 (BYTE LENGTH) 0>)
  (OOPS-INBUF:TABLE <ITABLE 120 (BYTE LENGTH) 0>)
  SEARCH-FLAGS:FIX
  (P-LEN:FIX BYTE)
  (P-CONT:<OR TABLE FALSE> <>)
  (P-WORD-NUMBER:FIX BYTE)
  (P-RUNNING:<OR TABLE FALSE> <>)>

<MSETG O-START 0>
<MSETG O-LENGTH 1>
<MSETG O-END 2>
<MSETG O-PTR 3>

<END-DEFINITIONS>
